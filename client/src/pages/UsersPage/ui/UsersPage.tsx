import { useState, useCallback, useEffect } from 'react';
import { Header } from '../../../widgets/Header/ui/Header';
import { UsersList } from '../../../widgets/UsersList/ui/UsersList';
import { SelectedUserWidget } from '../../../widgets/SelectedUserWidget/ui/SelectedUserWidget';
import { UsersFilters } from '../../../widgets/UsersFilters';
import { useGetUsersQuery, useUpdateUserMutation, useDeleteUserMutation } from '../../../entities/user/model/userApi';
import { EditUserModal } from '../../../features/editUser';
import { ConfirmDialog } from '../../../shared/ui/ConfirmDialog';
import { Notification } from '../../../shared/ui/Notification';
import type { User, UpdateUserInput } from '../../../entities/user/model/types';

export const UsersPage = () => {
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);
  const { data: users = [], isLoading, error } = useGetUsersQuery();

  // –ú–æ–¥–∞–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [deletingUser, setDeletingUser] = useState<User | null>(null);
  const [isConfirmDialogOpen, setIsConfirmDialogOpen] = useState(false);
  const [notification, setNotification] = useState<{
    message: string;
    type: 'success' | 'error' | 'info';
    isVisible: boolean;
  }>({
    message: '',
    type: 'info',
    isVisible: false,
  });

  const [updateUser, { isLoading: isUpdating }] = useUpdateUserMutation();
  const [deleteUser, { isLoading: isDeleting }] = useDeleteUserMutation();

  const showNotification = (message: string, type: 'success' | 'error' | 'info' = 'info') => {
    setNotification({ message, type, isVisible: true });
  };
  const hideNotification = () => {
    setNotification(prev => ({ ...prev, isVisible: false }));
  };

  const handleUserSelect = (user: User | null) => {
    setSelectedUser(user);
  };

  const handleClearSelection = () => {
    setSelectedUser(null);
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleEditUser = (user: User) => {
    setEditingUser(user);
    setIsEditModalOpen(true);
  };
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleSaveUser = async (userData: UpdateUserInput) => {
    try {
      await updateUser(userData).unwrap();
      setIsEditModalOpen(false);
      setEditingUser(null);
      showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
    } catch (error) {
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    }
  };
  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setEditingUser(null);
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  const handleDeleteUser = (user: User) => {
    setDeletingUser(user);
    setIsConfirmDialogOpen(true);
  };
  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
  const confirmDelete = async () => {
    if (!deletingUser) return;
    try {
      await deleteUser({ id: deletingUser.id }).unwrap();
      if (selectedUser?.id === deletingUser.id) {
        setSelectedUser(null);
      }
      showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
    } catch (error) {
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
    } finally {
      setIsConfirmDialogOpen(false);
      setDeletingUser(null);
    }
  };
  const cancelDelete = () => {
    setIsConfirmDialogOpen(false);
    setDeletingUser(null);
  };

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const handleFilterChange = useCallback((filtered: User[]) => {
    setFilteredUsers(filtered);
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è filteredUsers –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ users
  useEffect(() => {
    if (users.length > 0) {
      setFilteredUsers(users);
    }
  }, [users]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <Header />
      <div className="container mx-auto px-4 py-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="mb-6 text-center">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent mb-2">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          </h1>
          <p className="text-gray-600">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
          </p>
        </div>

        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: —Ñ–∏–ª—å—Ç—Ä—ã —Å–≤–µ—Ä—Ö—É */}
        <div className="lg:hidden mb-6">
          <UsersFilters users={users} onFilterChange={handleFilterChange} />
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-12 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ) */}
          <div className="xl:col-span-3 lg:col-span-4 hidden lg:block">
            <div className="sticky top-6 space-y-4">
              <UsersFilters users={users} onFilterChange={handleFilterChange} />
            </div>
          </div>

          {/* –¶–µ–Ω—Ç—Ä: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <div className="xl:col-span-6 lg:col-span-5 col-span-1">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-5 max-w-3xl mx-auto overflow-y-auto max-h-[80vh]">
              <h2 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                <span className="mr-2">üë•</span>
                –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              </h2>
              <UsersList 
                selectedUser={selectedUser} 
                onUserSelect={handleUserSelect} 
                users={filteredUsers.length > 0 ? filteredUsers : users}
                isLoading={isLoading}
                error={error}
                onEditUser={handleEditUser}
                onDeleteUser={handleDeleteUser}
              />
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */}
          <div className="xl:col-span-3 lg:col-span-3">
            <div className="sticky top-6">
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-5">
                <SelectedUserWidget 
                  selectedUser={selectedUser} 
                  onClearSelection={handleClearSelection}
                  onEditUser={handleEditUser}
                  onDeleteUser={handleDeleteUser}
                />
              </div>
            </div>
          </div>
        </div>

        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∏–∑—É */}
        {selectedUser && (
          <div className="lg:hidden mt-6">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-5">
              <SelectedUserWidget 
                selectedUser={selectedUser} 
                onClearSelection={handleClearSelection}
                onEditUser={handleEditUser}
                onDeleteUser={handleDeleteUser}
              />
            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <EditUserModal
        user={editingUser}
        isOpen={isEditModalOpen}
        onClose={closeEditModal}
        onSave={handleSaveUser}
        isLoading={isUpdating}
      />
      <ConfirmDialog
        isOpen={isConfirmDialogOpen}
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
        message={`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${deletingUser?.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`}
        onConfirm={confirmDelete}
        onCancel={cancelDelete}
        confirmText="–£–¥–∞–ª–∏—Ç—å"
        isLoading={isDeleting}
      />
      <Notification
        message={notification.message}
        type={notification.type}
        isVisible={notification.isVisible}
        onClose={hideNotification}
      />
    </div>
  );
}; 